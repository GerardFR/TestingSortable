@page "/textpage"
@using TestingSortable.Client.Pages.Components
@using TestingSortable.Client.Sortable

<PageTitle>Texts</PageTitle>

@if (Texts is not null)
{
    <h2 class="mt-3">Not sortable</h2>
    <div class="d-flex flex-wrap gap-2">
        @foreach (var text in Texts)
        {
            <TextComponent Text="@text" />
        }
    </div>

    <h2 class="mt-3">Sortable</h2>
    <SortableList Class="d-flex flex-wrap gap-2" Id="text1" Items="Texts" OnUpdate="SortList" Context="text">
        <SortableItemTemplate>
            <div class="card" style="width:5rem;height:5rem">
                <div class="card-body">
                    @text
                </div>
            </div>
        </SortableItemTemplate>
    </SortableList>

    <h2 class="mt-3">Sortable with component</h2>
    <SortableList Class="d-flex flex-wrap gap-2" Id="text2" Items="Texts" OnUpdate="SortList" Context="text">
        <SortableItemTemplate>
            <TextComponent Text="@text" />
        </SortableItemTemplate>
    </SortableList>
}

@code {
    public List<string>? Texts { get; set; }

    protected override void OnInitialized()
    {
        Texts = Enumerable.Range(1, 6).Select(x => x.ToString()).ToList();
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var itemToMove = Texts![oldIndex];
        Texts.RemoveAt(oldIndex);

        if (newIndex < Texts.Count)
        {
            Texts.Insert(newIndex, itemToMove);
        }
        else
        {
            Texts.Add(itemToMove);
        }

        StateHasChanged();
    }

}
